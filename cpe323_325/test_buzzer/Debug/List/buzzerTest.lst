###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         06/Oct/2014  16:32:21
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  D:\uah\cpe323\test_buzzer\buzzerTest.c
#    Command line  =  
#        D:\uah\cpe323\test_buzzer\buzzerTest.c -lCN
#        D:\uah\cpe323\test_buzzer\Debug\List\ -o
#        D:\uah\cpe323\test_buzzer\Debug\Obj\ --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FG4618__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=16 --segment __data16=DATA16 --segment __data20=DATA20
#        --code_model=large
#    List file     =  D:\uah\cpe323\test_buzzer\Debug\List\buzzerTest.lst
#    Object file   =  D:\uah\cpe323\test_buzzer\Debug\Obj\buzzerTest.r43
#
###############################################################################

D:\uah\cpe323\test_buzzer\buzzerTest.c
      1          /***********************************************************************
      2           * A buzzer test. Nothing more.
      3           **********************************************************************/
      4          
      5          #include <msp430.h> // The correct include statement
      6          
      7          #define SW1 (0x01&P1IN)	// B1 - P1.0 switch SW1 
      8          #define SW2 (0x02&P1IN)	// B2 - P1.1 switch SW2
      9          
     10          const int freq_aclk = 32767;
     11          volatile int fractionOfSecond = 1000; // 1000 clicks from aclk
     12          volatile int adjustFactor = 1000; // Amount to change timerPeriod by
     13          volatile int TBperiod = 33; // every 33 clicks, Timer_B goes off
     14          
     15          void main(void)
     16          {
     17          	WDTCTL = WDT_ADLY_250;	// 1 s interval timer
     18          	P2DIR |= BIT2;			// Set P2.2 to output direction
     19          	P2DIR |= BIT1;
     20          	P3DIR |= BIT5;
     21          	//P1DIR |= BIT1;
     22          
     23          	P3SEL |= BIT5;
     24          	P2SEL |= BIT1;
     25          
     26          	TB0CCTL4 = OUTMOD_4;
     27          	TB0CCTL0 = OUTMOD_4;
     28          	TB0CTL = TBSSEL_1 + MC_1; // There is no such thing as "AMCLK", we're using TXSSEL_1=ACLK
     29          
     30          	current = (rate / clocker);
     31          
     32          	TB0CCR0 = current; // 32767
     33          	//we want a 900Hz tone
     34          	// So, 1000Hz is a period of 1/1000.
     35          	// Which is 0.0001 seconds, which is 1 ms, which is 1000 us
     36          
     37          	_EINT();			// Enable interrupts
     38          	// __enable_interrupt(); // Same as _EINT()?
     39          	P1IE |= 0x0003;		// P1.0 interrupt enabled
     40          	P1IES |= 0x0003;	// P1.0 hi -> low edge
     41          	P1IFG &= ~0x0003;	// Clear P1.0 IFG
     42          
     43          	TB0CCR4 = TB0CCR0;
     44          
     45          	//P2OUT &= ~BIT1;
     46          	//P3OUT |= ~BIT5;
     47          
     48          	IE1 |= WDTIE;                     // Enable WDT interrupt
     49          
     50          	_BIS_SR(LPM0_bits + GIE);         // Enter LPM0 w/ interrupt
     51          
     52          	while (1)
     53          	{
     54          		asm("NOP");
     55          	}
     56          }
     57          
     58          // Watchdog Timer interrupt service routine
     59          #pragma vector=WDT_VECTOR
     60          __interrupt void watchdog_timer(void)
     61          {
     62              P2OUT ^= BIT2;			// Toggle P2.2 using exclusive-OR
     63              //P3OUT ^= BIT5;
     64              //P1OUT ^= BIT1;
     65          }
     66          
     67          /*
     68           * Port 1 interrupt service
     69           */
     70          #pragma vector = PORT1_VECTOR // The fuck does pragma mean? or vector for that matter.
     71          __interrupt void Port1_ISR (void)
     72          {
     73          	// Constant delay debounce, arbitrary looper value
     74          	// At SCFQCTL=30, we delay 20 NOP instructions.
     75          	// At SCFQCTL=60, we delay 40 NOP instructions.
     76          	// At SCFQCTL=120, we delay 80 NOP instructions.
     77          	// A linear relationship between clock and delay :)
     78          	int factor = (SCFQCTL / 30);
     79          	int looper = (20 * factor);
     80          
     81          	for (int c = 0; c < looper; c++)
     82          	{
     83          		asm("NOP");
     84          	}
     85          
     86          	if (((SW1) == 0) && ((SW2) != 0))
     87          	{
     88          		timerPeriod += adjustFactor;
     89          	}
     90          	else if (((SW2) == 0) && ((SW1) != 0))
     91          	{
     92          		timerPeriod -= adjustFactor;
     93          	}
     94          
     95          	TBperiod = (freq_aclk / fractionOfSecond);
     96          
     97          	TB0CCR0 = TBperiod;
     98          		
     99          	P1IFG &= ~BIT1;		// Clear P1.1 IFG
    100          	P1IFG &= ~BIT0;		// Clear P1.0 IFG
    101          }
    102          
    103          
    104          
    105          
    106          
    107          
    108          
    109          
    110          
    111          
    112          
    113          
    114          
    115          
    116          
    117          
    118          
    119          
    120          
    121          
    122          
    123          
    124          
    125          
    126          
    127          
    128          
    129          
    130          

Errors: 5
Warnings: none
