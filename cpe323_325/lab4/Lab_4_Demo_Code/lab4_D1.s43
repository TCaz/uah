/*---------------------------------------------------------------------------
* Program    : Find a sum of two integer arrays;
* Input      : The input arrays are signed 16-bit integers in arr1 and arr2
* Output     : Display sum of arr1 on P1OUT&P2OUT and sum of arr2 on P3OUT&P4OUT
* Modified by: A. Milenkovic, milenkovic@computer.org
* Date       : September 14, 2008
* Description: MSP430 IAR EW; Demonstation of the MSP430 assembler
*------------------------------------------------------------------------------*/
#include "msp430.h"                     ; #define controlled include file

        ORG 0FF00h

        NAME    main                    ; module name
        PUBLIC  main                    ; make the main label visible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   MOV     #SFE(CSTACK), SP        ; set up stack
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        BIS.B   #0xFF,&P1DIR            ; configure P1.x as output
        BIS.B   #0xFF,&P2DIR            ; configure P2.x as output
        BIS.B   #0xFF,&P3DIR            ; configure P3.x as output
        BIS.B   #0xFF,&P4DIR            ; configure P4.x as output
		; load the starting address of the array1 into the register R4
        MOV.W   #arr1, R4               
		; load the starting address of the array1 into the register R4
        MOV.W   #arr2, R5               
;       Sum arr1 and display
        CLR     R7                      ; Holds the sum
        MOV     #8, R10                 ; number of elements in arr1
lnext1: ADD     @R4+, R7                ; get next element
        DEC     R10
        JNZ     lnext1
        MOV.B   R7, P1OUT               ; display sum of arr1
        SWPB    R7
        MOV.B   R7, P2OUT
;       Sum arr2 and display
        CLR     R7                      ; Holds the sum
        MOV     #7, R10                 ; number of elements in arr2
lnext2: ADD     @R5+, R7                ; get next element
        DEC     R10
        JNZ     lnext2
        MOV.B   R7, P3OUT               ; display sum of arr1
        SWPB    R7
        MOV.B   R7, P4OUT
        JMP     $

arr1    DC16     1, 2, 3, 4, 1, 2, 3, 4     ; the first array
arr2    DC16     1, 1, 1, 1, -1, -1, -1     ; the second array

        END
