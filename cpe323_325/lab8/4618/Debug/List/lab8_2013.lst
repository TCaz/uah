###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         22/Oct/2014  17:59:25
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  D:\uah\cpe323\lab8\lab8_2013.c
#    Command line  =  
#        D:\uah\cpe323\lab8\lab8_2013.c -lCN D:\uah\cpe323\lab8\Debug\List\ -o
#        D:\uah\cpe323\lab8\Debug\Obj\ --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FG4618__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=16 --segment __data16=DATA16 --segment __data20=DATA20
#        --code_model=large
#    List file     =  D:\uah\cpe323\lab8\Debug\List\lab8_2013.lst
#    Object file   =  D:\uah\cpe323\lab8\Debug\Obj\lab8_2013.r43
#
###############################################################################

D:\uah\cpe323\lab8\lab8_2013.c
      1          /***********************************************************************
      2           * Title: Lab 8 - 2013 part
      3           * Date Due: Oct sometime
      4           * 
      5           * Description:
      6           * 
      7           *
      8           * By: Christopher 'ctag' Bero <csb0019@uah.edu>
      9           * Project: https://github.com/ctag/uah
     10           *
     11           * This software is licensed under the GPLv3,
     12           * consult the LICENSE file for more information.
     13           **********************************************************************/
     14          
     15          #define PORT1_7 P1IN&0x07
     16          
     17          #include <msp430.h> // The *correct* include statement

   \                                 In  segment DATA16_AN, at 0x20
   \   unsigned char const volatile P1IN
   \                     P1IN:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x21
   \   unsigned char volatile P1OUT
   \                     P1OUT:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x22
   \   unsigned char volatile P1DIR
   \                     P1DIR:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x120
   \   unsigned short volatile WDTCTL
   \                     WDTCTL:
   \   000000                DS8 2
     18          

   \                                 In  segment CODE, align 2
     19          void main(void)
   \                     main:
     20          {
     21          	//WDTCTL = WDT_ADLY_250;
     22          	WDTCTL = (WDTPW|WDTHOLD);
   \   000000   B240805A2001 MOV.W   #0x5a80, &0x120
     23          	
     24          	P1DIR &= ~BIT8; // Set P1.7 as input
   \   000006   D24222002200 MOV.B   &0x22, &0x22
     25          	P1DIR |= BIT0; // LED3 as output
   \   00000C   D2D32200     BIS.B   #0x1, &0x22
     26          	P1OUT &= ~BIT0; // LED off
   \   000010   D2C32100     BIC.B   #0x1, &0x21
     27          	
     28          	//_EINT();			// Enable interrupts
     29          	//__enable_interrupt(); // Same as _EINT()?
     30          	
     31          	//IE1 |= WDTIE;                     // Enable WDT interrupt
     32          	//_BIS_SR(LPM0_bits + GIE);         // Enter LPM0 w/ interrupt
     33          
     34          	while (1)
     35          	{
     36          		if ((PORT1_7) != 0)
   \                     ??main_1:
   \   000014   F2B007002000 BIT.B   #0x7, &0x20
   \   00001A   0824         JEQ     ??main_2
     37          		{
     38                                  P1OUT |= BIT0; // LED on
   \   00001C   D2D32100     BIS.B   #0x1, &0x21
     39          			while ((PORT1_7) != 0)
   \                     ??main_0:
   \   000020   F2B007002000 BIT.B   #0x7, &0x20
   \   000026   0224         JEQ     ??main_2
     40          			{
     41          				asm("NOP");
   \   000028   0343         NOP
   \   00002A   FA3F         JMP     ??main_0
     42          			}
     43          		}
     44          		P1OUT &= ~BIT0; // LED off
   \                     ??main_2:
   \   00002C   D2C32100     BIC.B   #0x1, &0x21
   \   000030   F13F         JMP     ??main_1
   \   000032                REQUIRE WDTCTL
   \   000032                REQUIRE P1DIR
   \   000032                REQUIRE P1OUT
   \   000032                REQUIRE P1IN
     45          	}
     46          }
     47          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  P1DIR
       1  P1IN
       1  P1OUT
       2  WDTCTL
      50  main

 
 50 bytes in segment CODE
  5 bytes in segment DATA16_AN
 
 50 bytes of CODE memory
  0 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
