###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         02/Oct/2014  15:01:05
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  D:\lab6\assignment\lab6_bero.c
#    Command line  =  
#        D:\lab6\assignment\lab6_bero.c -lCN D:\lab6\assignment\Debug\List\ -o
#        D:\lab6\assignment\Debug\Obj\ --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FG4618__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=16 --segment __data16=DATA16 --segment __data20=DATA20
#        --code_model=large
#    List file     =  D:\lab6\assignment\Debug\List\lab6_bero.lst
#    Object file   =  D:\lab6\assignment\Debug\Obj\lab6_bero.r43
#
###############################################################################

D:\lab6\assignment\lab6_bero.c
      1          /***********************************************************************
      2           *   lab6, TI experimenter board project
      3           *
      4           *   Desc:	This program closely follows the guidelines set for
      5           *			it in the Lab6 pdf manual.
      6           *			SW1 and SW2 are interrupt enabled and each affects
      7           * 			the controller's clock to adjust the blink rate of LED1/2
      8           *
      9           *   .----._.-----.
     10           *   |MSP430xG461x|
     11           *   |            |
     12           *   |        RST |-->
     13           *   |            |
     14           *   |       P1.0 |-->SW1 (labeled)
     15           *   |       P1.1 |-->SW2 (labeled)
     16           *   |            |
     17           *   |       P2.2 |-->LED1 (GREEN)
     18           *   |       P2.1 |-->LED2 (YELLOW)
     19           *   |            |
     20           *   |       P3.5 |-->Buzzer
     21           *   |            |
     22           *   \____________/ 
     23           * 
     24           *   Christopher Bero <csb0019@uah.edu>
     25           **********************************************************************/
     26          
     27          // Here's to the day that IAR is able to format .c files correctly.
     28          // Don't hold your breath.
     29          
     30          #include  <msp430.h> 	// The /correct/ way to include standard library

   \                                 In  segment DATA16_AN, at 0x50
   \   unsigned char volatile SCFI0
   \                     SCFI0:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x52
   \   unsigned char volatile SCFQCTL
   \                     SCFQCTL:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x53
   \   unsigned char volatile FLL_CTL0
   \                     FLL_CTL0:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x20
   \   unsigned char const volatile P1IN
   \                     P1IN:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x23
   \   unsigned char volatile P1IFG
   \                     P1IFG:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x24
   \   unsigned char volatile P1IES
   \                     P1IES:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x25
   \   unsigned char volatile P1IE
   \                     P1IE:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x29
   \   unsigned char volatile P2OUT
   \                     P2OUT:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x2a
   \   unsigned char volatile P2DIR
   \                     P2DIR:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x31
   \   unsigned char volatile P5OUT
   \                     P5OUT:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x32
   \   unsigned char volatile P5DIR
   \                     P5DIR:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x160
   \   unsigned short volatile TACTL
   \                     TACTL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x162
   \   unsigned short volatile TACCTL0
   \                     TACCTL0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x172
   \   unsigned short volatile TACCR0
   \                     TACCR0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x120
   \   unsigned short volatile WDTCTL
   \                     WDTCTL:
   \   000000                DS8 2
     31          
     32          #define SW1 0x01&P1IN	// B1 - P1.0 switch SW1 
     33          #define SW2 0x02&P1IN	// B2 - P1.1 switch SW2
     34          
     35          // Volatile variables may be changed at any time by a subroutine (interrupt)

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          volatile short int timerCount = 0;			// Number of times TimerA has been triggered
   \                     timerCount:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     37          volatile short int previousClock = 60;		// The clock factor to return to after SW2 interrupt
   \                     previousClock:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for previousClock>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          volatile short int sw2Interrupt = 0;	// Status boolean, are we in a modified clock state?
   \                     sw2Interrupt:
   \   000000                DS8 2
     39          										// 0 = no; 1 = yes;
     40          /*
     41           * Main function (infinite loop, no exit)
     42           */

   \                                 In  segment CODE, align 2
     43          void main ( void ) 
   \                     main:
     44          {
     45          	WDTCTL = WDTPW + WDTHOLD;	// Stop watchdog timer 
   \   000000   B240805A2001 MOV.W   #0x5a80, &0x120
     46          
     47          	FLL_CTL0 |= XCAP18PF;	// Set load capacitance for xtal
   \   000006   F2D030005300 BIS.B   #0x30, &0x53
     48          	SCFI0 |= FN_2;			// x2 DCO, 4MHz nominal DCO
   \   00000C   E2D25000     BIS.B   #0x4, &0x50
     49          	SCFQCTL = 60;			// (60+1) x 32768 ~= 2 MHz
   \   000010   F2403C005200 MOV.B   #0x3c, &0x52
     50          	
     51          	P2DIR |= 0x06;		// Set P2.1 and P2.2 to output direction (0000_0110) 
   \   000016   F2D006002A00 BIS.B   #0x6, &0x2a
     52          	P2OUT = 0x02; 		// Set P2OUT to 0000_0010b (LED2 is ON, LED1 is OFF)
   \   00001C   E2432900     MOV.B   #0x2, &0x29
     53          	
     54                  P5DIR |= 0x02;          // Pin 5, on P5.1, a red LED, cool.
   \   000020   E2D33200     BIS.B   #0x2, &0x32
     55                  P5OUT = 0x00;           // Let's use it! (needs jumper JP3 bridged)
   \   000024   C2433100     MOV.B   #0x0, &0x31
     56                  
     57          	// Screw looping, use TimerA and SMCLK to control LEDs
     58          	TA0CCR0 |= 40000-1;	// See below
   \   000028   B2D03F9C7201 BIS.W   #0x9c3f, &0x172
     59          		// ACLK ~ 33KHz & SMCLK ~ 2MHz
     60          		// So we trigger every 32,768 clicks to achieve 1Hz blink (1 second on, 1 second off) with ACLK
     61          		// Or every 2,000,000 clicks for SMCLK (the one we have to use)
     62          		// The register value cannot exceed ~60,000, so we must use 40,000 and count to 50
     63          		// But we really want a 2Hz blink (0.5 sec on, 0.5 sec off), so we only count to 25
     64          	TA0CCTL0 |= CCIE;			// Enable the clock interrupt
   \   00002E   B2D010006201 BIS.W   #0x10, &0x162
     65          	TA0CTL |= TASSEL_2 + MC_1;	// Choose SMCLK as the clock, change to TASSEL_1 for ACLK	
   \   000034   B2D010026001 BIS.W   #0x210, &0x160
     66          
     67          	_EINT();			// Enable interrupts
   \   00003A   32D2         EINT
     68          	P1IE |= 0x0003;		// P1.0 interrupt enabled
   \   00003C   F2D003002500 BIS.B   #0x3, &0x25
     69          	P1IES |= 0x0003;	// P1.0 hi -> low edge
   \   000042   F2D003002400 BIS.B   #0x3, &0x24
     70          	P1IFG &= ~0x0003;	// Clear P1.0 IFG
   \   000048   F2F0FC002300 AND.B   #0xfc, &0x23
     71          	
     72          	while (1) 
     73          	{
     74          		// Coming out of a SW2 interrupt once button is released
     75          		if (((SW2) != 0) && (sw2Interrupt == 1))
   \                     ??main_0:
   \   00004E   E2B32000     BIT.B   #0x2, &0x20
   \   000052   FD2B         JNC     ??main_0
   \   000054   9293....     CMP.W   #0x1, &sw2Interrupt
   \   000058   FA23         JNE     ??main_0
     76          		{
     77          			SCFQCTL = previousClock;
   \   00005A   1E42....     MOV.W   &previousClock, R14
   \   00005E   C24E5200     MOV.B   R14, &0x52
     78          			sw2Interrupt = 0;
   \   000062   8243....     MOV.W   #0x0, &sw2Interrupt
   \   000066   F33F         JMP     ??main_0
   \   000068                REQUIRE WDTCTL
   \   000068                REQUIRE FLL_CTL0
   \   000068                REQUIRE SCFI0
   \   000068                REQUIRE SCFQCTL
   \   000068                REQUIRE P2DIR
   \   000068                REQUIRE P2OUT
   \   000068                REQUIRE P5DIR
   \   000068                REQUIRE P5OUT
   \   000068                REQUIRE TACCR0
   \   000068                REQUIRE TACCTL0
   \   000068                REQUIRE TACTL
   \   000068                REQUIRE P1IE
   \   000068                REQUIRE P1IES
   \   000068                REQUIRE P1IFG
   \   000068                REQUIRE P1IN
     79          		}
     80          	}
     81          }
     82          
     83          /*
     84           * Port 1 interrupt service
     85           */
     86          #pragma vector = PORT1_VECTOR // The fuck does pragma mean? or vector for that matter.

   \                                 In  segment ISR_CODE, align 2
     87          __interrupt void Port1_ISR (void)
   \                     Port1_ISR:
     88          {
   \   000000   3F15         PUSHM.W #0x4, R15
     89          	// Constant delay debounce, arbitrary looper value
     90            // At SCFQCTL=30, we delay 20 NOP instructions.
     91            // At SCFQCTL=60, we delay 40 NOP instructions.
     92            // At SCFQCTL=120, we delay 80 NOP instructions.
     93            // A linear relationship between clock and delay :)
     94          	int factor = (SCFQCTL / 30);
   \   000002   5C425200     MOV.B   &0x52, R12
   \   000006   7E401E00     MOV.B   #0x1e, R14
   \   00000A   ........     CALLA   #?DivMod8u
   \   00000E   4C4C         MOV.B   R12, R12
     95          	int looper = (20 * factor);
   \   000010   0E4C         MOV.W   R12, R14
   \   000012   5E06         RLAM.W  #0x2, R14
   \   000014   0F4E         MOV.W   R14, R15
   \   000016   5E06         RLAM.W  #0x2, R14
   \   000018   0E5F         ADD.W   R15, R14
     96          	
     97          	for (int c = 0; c < looper; c++)
   \   00001A   0F43         MOV.W   #0x0, R15
   \                     ??Port1_ISR_0:
   \   00001C   0F9E         CMP.W   R14, R15
   \   00001E   0334         JGE     ??Port1_ISR_1
     98          	{
     99          		asm("NOP");
   \   000020   0343         NOP
    100          	}
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   FB3F         JMP     ??Port1_ISR_0
    101            
    102          	if (((SW1) == 0) && ((SW2) != 0))
   \                     ??Port1_ISR_1:
   \   000026   D2B32000     BIT.B   #0x1, &0x20
   \   00002A   132C         JC      ??Port1_ISR_2
   \   00002C   E2B32000     BIT.B   #0x2, &0x20
   \   000030   1028         JNC     ??Port1_ISR_2
    103          	{
    104          		if (SCFQCTL == 60)
   \   000032   F2903C005200 CMP.B   #0x3c, &0x52
   \   000038   0420         JNE     ??Port1_ISR_3
    105          		{
    106          			SCFQCTL = 120;	// Set clock to 4Mhz
   \   00003A   F24078005200 MOV.B   #0x78, &0x52
   \   000040   1B3C         JMP     ??Port1_ISR_4
    107          		} 
    108          		else if (SCFQCTL == 120)
   \                     ??Port1_ISR_3:
   \   000042   F29078005200 CMP.B   #0x78, &0x52
   \   000048   1720         JNE     ??Port1_ISR_4
    109          		{
    110          			SCFQCTL = 60;	// Set clock to 2Mhz
   \   00004A   F2403C005200 MOV.B   #0x3c, &0x52
   \   000050   133C         JMP     ??Port1_ISR_4
    111          		}
    112          	}
    113          	else if (((SW2) == 0) && ((SW1) != 0) && (sw2Interrupt == 0))
   \                     ??Port1_ISR_2:
   \   000052   E2B32000     BIT.B   #0x2, &0x20
   \   000056   102C         JC      ??Port1_ISR_4
   \   000058   D2B32000     BIT.B   #0x1, &0x20
   \   00005C   0D28         JNC     ??Port1_ISR_4
   \   00005E   8293....     CMP.W   #0x0, &sw2Interrupt
   \   000062   0A20         JNE     ??Port1_ISR_4
    114          	{
    115          		previousClock = SCFQCTL;
   \   000064   5F425200     MOV.B   &0x52, R15
   \   000068   4F4F         MOV.B   R15, R15
   \   00006A   824F....     MOV.W   R15, &previousClock
    116          		sw2Interrupt = 1;
   \   00006E   9243....     MOV.W   #0x1, &sw2Interrupt
    117          		SCFQCTL = 30;	// Set clock to 1Mhz
   \   000072   F2401E005200 MOV.B   #0x1e, &0x52
    118          	}
    119          	
    120          	P1IFG &= ~BIT1;		// Clear P1.1 IFG
   \                     ??Port1_ISR_4:
   \   000078   E2C32300     BIC.B   #0x2, &0x23
    121          	P1IFG &= ~BIT0;		// Clear P1.0 IFG
   \   00007C   D2C32300     BIC.B   #0x1, &0x23
    122          }
   \   000080   3C17         POPM.W  #0x4, R15
   \   000082   0013         RETI
   \   000084                REQUIRE SCFQCTL
   \   000084                REQUIRE P1IN
   \   000084                REQUIRE P1IFG
    123          
    124          /*
    125           * TimerA interrupt service
    126           */
    127          #pragma vector=TIMER0_A0_VECTOR

   \                                 In  segment ISR_CODE, align 2
    128          __interrupt void Timer0_A0 (void) 
   \                     Timer0_A0:
    129          {
   \   000000   3F15         PUSHM.W #0x4, R15
    130          	// Blink LED4 once every other time the interrupt is called.
    131          	// Freq = interrupt/4
    132          	if ((timerCount % 2) == 1)
   \   000002   1C42....     MOV.W   &timerCount, R12
   \   000006   2E43         MOV.W   #0x2, R14
   \   000008   ........     CALLA   #?DivMod16s
   \   00000C   1E93         CMP.W   #0x1, R14
   \   00000E   0220         JNE     ??Timer0_A0_0
    133          	{
    134          		P5OUT ^= 0x02;
   \   000010   E2E33100     XOR.B   #0x2, &0x31
    135          	}
    136              
    137          	timerCount++;
   \                     ??Timer0_A0_0:
   \   000014   9253....     ADD.W   #0x1, &timerCount
    138          	
    139          	// Blink LED1 + LED2
    140          	// Freq = interrupt/25
    141          	if (timerCount == 25)
   \   000018   B2901900.... CMP.W   #0x19, &timerCount
   \   00001E   0520         JNE     ??Timer0_A0_1
    142          	{
    143          		P2OUT ^= 0x06;
   \   000020   F2E006002900 XOR.B   #0x6, &0x29
    144          		timerCount = 0;
   \   000026   8243....     MOV.W   #0x0, &timerCount
    145          	}
    146          }
   \                     ??Timer0_A0_1:
   \   00002A   3C17         POPM.W  #0x4, R15
   \   00002C   0013         RETI
   \   00002E                REQUIRE P5OUT
   \   00002E                REQUIRE P2OUT

   \                                 In  segment INTVEC, offset 0x28, root
   \                     `??Port1_ISR??INTVEC 40`:
   \   000028   ....         DC16    Port1_ISR

   \                                 In  segment INTVEC, offset 0x2c, root
   \                     `??Timer0_A0??INTVEC 44`:
   \   00002C   ....         DC16    Timer0_A0

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for previousClock>`:
   \   000000   3C00         DC16 60
    147          
    148          
    149          
    150          
    151          
    152          
    153          
    154          
    155          
    156          
    157          
    158          
    159          
    160          
    161          
    162          
    163          
    164          
    165          
    166          
    167          
    168          
    169          
    170          
    171          
    172          
    173          
    174          
    175          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   Port1_ISR
     12   Timer0_A0
      4   main


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for previousClock>
       2  ??Port1_ISR??INTVEC 40
       2  ??Timer0_A0??INTVEC 44
       1  FLL_CTL0
       1  P1IE
       1  P1IES
       1  P1IFG
       1  P1IN
       1  P2DIR
       1  P2OUT
       1  P5DIR
       1  P5OUT
     132  Port1_ISR
       1  SCFI0
       1  SCFQCTL
       2  TACCR0
       2  TACCTL0
       2  TACTL
      46  Timer0_A0
       2  WDTCTL
     104  main
       2  previousClock
       2  sw2Interrupt
       2  timerCount

 
 104 bytes in segment CODE
  19 bytes in segment DATA16_AN
   2 bytes in segment DATA16_I
   2 bytes in segment DATA16_ID
   4 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 178 bytes in segment ISR_CODE
 
 282 bytes of CODE  memory
   2 bytes of CONST memory (+  4 bytes shared)
   6 bytes of DATA  memory (+ 19 bytes shared)

Errors: none
Warnings: none
