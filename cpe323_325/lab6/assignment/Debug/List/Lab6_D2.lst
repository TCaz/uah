###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         30/Sep/2014  12:51:17
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  D:\uah\cpe323\lab6\demo\Lab6_D2.c
#    Command line  =  
#        D:\uah\cpe323\lab6\demo\Lab6_D2.c -lCN
#        D:\uah\cpe323\lab6\demo\Debug\List\ -o
#        D:\uah\cpe323\lab6\demo\Debug\Obj\ --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FG4618__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=16 --segment __data16=DATA16 --segment __data20=DATA20
#        --code_model=large
#    List file     =  D:\uah\cpe323\lab6\demo\Debug\List\Lab6_D2.lst
#    Object file   =  D:\uah\cpe323\lab6\demo\Debug\Obj\Lab6_D2.r43
#
###############################################################################

D:\uah\cpe323\lab6\demo\Lab6_D2.c
      1          /****************************************************************************
      2          ;   MSP430xG46x Demo - Interfacing Switch
      3          ;   Description: This program will keep LED1 ON as long as the switch SW1 is
      4          ;	pressed and turn it OFF as soon as the switch is released. This is
      5          ;	achieved by checking conditions for the switch state (pressed/released).
      6          ;   ACLK = 32.768kHz, MCLK = SMCLK = 1 MHz
      7          ;                 MSP430xG461x
      8          ;             -----------------
      9          ;         /|\|                 |
     10          ;          | |                 |
     11          ;          --|RST          P1.0|-->SW1
     12          ;            |                 |
     13          ;            |             P2.2|-->LED1
     14          ;   Alex Milenkovich, milenkovic@computer.org
     15          ;   Max Avula, ma0004@uah.edu
     16          ;***************************************************************************/
     17          #include  <msp430xG46x.h> 

   \                                 In  segment DATA16_AN, at 0x20
   \   unsigned char const volatile P1IN
   \                     P1IN:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x29
   \   unsigned char volatile P2OUT
   \                     P2OUT:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x2a
   \   unsigned char volatile P2DIR
   \                     P2DIR:
   \   000000                DS8 1
     18          
     19          #define SW1 BIT0&P1IN    					// B1 - P1.0 switch SW1 
     20          

   \                                 In  segment CODE, align 2
     21          void main(void) 
   \                     main:
     22          { 
     23          	int i;
     24          	P2DIR |= 0x04;							// Set LED1 as output 
   \   000000   E2D22A00     BIS.B   #0x4, &0x2a
     25            	for(;;) {     
     26              	if ((SW1) == 0)        				// if SW1 is pressed 
   \                     ??main_0:
   \   000004   D2B32000     BIT.B   #0x1, &0x20
   \   000008   FD2F         JC      ??main_0
     27                	{ 
     28                		for(i=1000; i > 0; i--);  		// Make sure it is indeed pressed 
   \   00000A   3F40E803     MOV.W   #0x3e8, R15
   \                     ??main_1:
   \   00000E   1F93         CMP.W   #0x1, R15
   \   000010   0238         JL      ??main_3
   \   000012   3F53         ADD.W   #0xffff, R15
   \   000014   FC3F         JMP     ??main_1
     29                		if((SW1) == 0)
   \                     ??main_3:
   \   000016   D2B32000     BIT.B   #0x1, &0x20
   \   00001A   022C         JC      ??main_2
     30          			{
     31          				P2OUT |= 0x04; 				// LED1 stays ON
   \   00001C   E2D22900     BIS.B   #0x4, &0x29
     32          			}
     33                		while((SW1)==0);  				// Wait until SW1 is released
   \                     ??main_2:
   \   000020   D2B32000     BIT.B   #0x1, &0x20
   \   000024   FD2B         JNC     ??main_2
     34          				P2OUT &= ~0x04; 			// LED1 stays OFF
   \   000026   E2C22900     BIC.B   #0x4, &0x29
   \   00002A   EC3F         JMP     ??main_0
   \   00002C                REQUIRE P2DIR
   \   00002C                REQUIRE P1IN
   \   00002C                REQUIRE P2OUT
     35                	}
     36              } 
     37          } 

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  P1IN
       1  P2DIR
       1  P2OUT
      44  main

 
 44 bytes in segment CODE
  3 bytes in segment DATA16_AN
 
 44 bytes of CODE memory
  0 bytes of DATA memory (+ 3 bytes shared)

Errors: none
Warnings: none
