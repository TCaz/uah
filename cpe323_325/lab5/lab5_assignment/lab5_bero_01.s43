;****************************************************************************
; TI Experimenter board assignment, CPE323
;
; Description: Toggle P2.1 and P2.2 according to which button is pressed.
;
;                 MSP430(xG461x)
;         /|\ -----------------
;          | |                 |
;          --|RST              |
;            |             P2.2|-->LED1(GREEN)
;            |             P2.1|-->LED2(YELLOW)
;            |                 |
;            |             P1.0|<--SW1
;            |             P1.1|<--SW2
;
; Christopher Bero <bigbero@gmail.com>
;****************************************************************************

#include	<msp430xG46x.h>		; Outdated according to mspgcc, should use
								; msp430.h instead

;----------------------------------------------------------------------------
			RSEG    CSTACK                  ; Define stack

;----------------------------------------------------------------------------
			RSEG    CODE                    ; Assembley to flash

;----------------------------------------------------------------------------
RESET nop ; Why is IAR such a piece of shit? Suddenly, colons don't work and all jumps fail! *gasp*
			mov.w	#SFE(CSTACK),SP         ; Initialize stack pointer
StopWDT nop
			mov.w	#WDTPW+WDTHOLD,&WDTCTL  ; Stop WDT

;----------------------------------------------------------------------------
Setup nop
		bis.b	#06h,&P2DIR		; Set P2.1&P2.2 to output
						; direction (0000_0110)
		bis.b	#00h,&P2OUT		; Set P2OUT to 0x0000_0000
						;(LED2 is off, LED1 is off)

		bis.w   #GIE,SR                 ; Enable global interrupts
		bis.b   #003h,&P1IE             ; Enable Port 1 interrupt from bit 0
		bis.b   #003h,&P1IES            ; Set interrupt to call from hi to low
		bic.b   #001h,&P1IFG            ; Clear interrupt flag

Main            bic.b   #02h, &P2OUT
		jmp     Main                    ; Loop until interrupt

;----------------------------------------------------------------------------
; P1_0 (SW1) interrupt service routine (ISR)
;----------------------------------------------------------------------------
SW1_ISR nop
		bic.b   #01h,&P1IFG            ; Clear interrupt flag
ChkSw1 nop
		bit.b	#01h,&P1IN	       ; Check if SW1 is pressed (0000_0001 on P1IN)
		jnz	ChkSw2                  ; If not zero, SW is not pressed

Debounce1 nop
		mov.w	#02000,R15		; Set to (2000 * 10 ms delay)
L1 nop	
		dec.w	R15			; Decrement R15
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		jnz	L1			; Delay over?
		bit.b	#00000001b,&P1IN	; verify SW1 is still pressed
		jnz	LEDDone  		; if not, wait for SW1 press

LED1 nop
		xor.b   #004h,&P2OUT            ; toggle LED1
LED1Wait nop
                bit.b	#00000001b,&P1IN	; verify SW1 is still pressed
                jnz     LEDDone
                jmp     LED1Wait

ChkSw2 nop	
		bit.b	#02h,&P1IN	        	; Check if SW2 is pressed (0000_0010 on P1IN)
		jnz	LEDDone  			; If not zero, SW is not pressed
							; loop and check again
                jmp     Debounce2                       ; go to debounce



LEDDone nop
                bic.b   #002h, &P2OUT
                reti                                    ; return from interrupt

Debounce2 nop
		mov.w	#02000,R15			; Set to (2000 * 10 ms delay)
L2 nop	
		dec.w	R15			        ; Decrement R15
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		jnz	L2		        ; Delay over?
		bit.b	#00000010b,&P1IN	; verify SW2 is still pressed
		jnz	LEDDone  	        ; if not, wait for SW2 press

LED2Loop nop
		xor.b   #002h,&P2OUT        ; Toggle P2.1 using XOR
Wait nop
		mov.w   #010000,R15         ; Delay to R15 (~0.1sec)
L3 nop
		dec.w   R15                 ; Decrement R15
		jnz     L3                  ; Delay over?
		bit.b	#00000010b,&P1IN	; verify SW2 is still pressed
		jnz	LEDDone  		; if not, wait for SW2 press
		jmp     LED2Loop            ; Again

;----------------------------------------------------------------------------
		COMMON  INTVEC                  ; Interrupt Vectors

;----------------------------------------------------------------------------
		ORG     RESET_VECTOR            ; MSP430 RESET Vector
		DW      RESET                   ;
		ORG     PORT1_VECTOR            ; Port1 interrupt vector
		DW      SW1_ISR                 ; go to SW1_ISR
		END

;****************************************************************************
; FIN
