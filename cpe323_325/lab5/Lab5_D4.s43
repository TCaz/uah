;****************************************************************************
;   TI Experimenter board demo, activate LED1 with SW1 using ISR (msp430FG4618)
;
;   Description: The LED1 is initialized off.  Global interrupts are enabled.
;               An endless loop is entered, and if SW1 is pressed
;               then an ISR is called delay loop waits 20 ms.  The switch is
;               checked again, and if on, the LED1 is turned on until the
;               switch is released.  The interrupt is returned from.
;                ACLK = 32.768kHz, MCLK = SMCLK = default DCO
;
;                 MSP430xG461x
;             -----------------
;         /|\|                 |
;          | |                 |
;          --|RST              |
;            |             P2.2|-->LED1(GREEN)
;            |             P1.0|<--SW1
;
;   Micah Harvey
;****************************************************************************
#include  <msp430xG46x.h>
;----------------------------------------------------------------------------
        RSEG    CSTACK                  ; Define stack segment
;----------------------------------------------------------------------------
        RSEG    CODE                    ; Assemble to Flash memory
;----------------------------------------------------------------------------
RESET:  mov.w   #SFE(CSTACK),SP         ; Initialize stack pointer
StopWDT:
        mov.w   #WDTPW+WDTHOLD,&WDTCTL  ; Stop WDT
Setup:
        bis.b   #004h,&P2DIR            ; Set P2.2 to output
                                        ; direction (0000_0100)
        bic.b   #004h,&P2OUT	        ; Set P2OUT to 0x0000_0100 (ensure
                                        ; LED1 is off)
        bis.w   #GIE,SR                 ; Enable global interrupts
        bis.b   #001h,&P1IE             ; Enable Port 1 interrupt from bit 0
        bis.b   #001h,&P1IES            ; Set interrupt to call from hi to low
        bic.b   #001h,&P1IFG            ; Clear interrupt flag
InfLoop:
        jmp     $                       ; Loop here until interrupt

;----------------------------------------------------------------------------
; P1_0 (SW1) interrupt service routine (ISR)
;----------------------------------------------------------------------------
SW1_ISR:
        bic.b   #001h,&P1IFG            ; Clear interrupt flag
ChkSw1:	bit.b	#01h,&P1IN	        ; Check if SW1 is pressed
                                        ; (0000_0001 on P1IN)
	jnz	ChkSw1  		; If not zero, SW is not pressed
                                        ; loop and check again
Debounce:
        mov.w	#02000,R15		; Set to (2000 * 10 ms delay)
L1:	dec.w	R15			; Decrement R15
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	jnz	L1			; Delay over?
	bit.b	#00000001b,&P1IN	; verify SW1 is still pressed
	jnz	ChkSw1  		; if not, wait for SW1 press

LEDon:  bis.b   #004h,&P2OUT            ; turn on LED1
SW1wait:
        bit.b   #001h,&P1IN             ; test SW1
        jz      SW1wait                 ; wait until SW1 is released
        bic.b   #004,&P2OUT             ; turn off LED1
        reti                            ; return from interrupt   
;----------------------------------------------------------------------------
        COMMON  INTVEC                  ; Interrupt Vectors
;----------------------------------------------------------------------------
        ORG     RESET_VECTOR            ; MSP430 RESET Vector
        DW      RESET                   ;
        ORG     PORT1_VECTOR            ; Port1 interrupt vector
        DW      SW1_ISR                 ; go to SW1_ISR
        END
;****************************************************************************
