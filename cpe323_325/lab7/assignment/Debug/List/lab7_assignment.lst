###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         16/Oct/2014  14:53:47
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  D:\uah\cpe323\lab7\assignment\lab7_assignment.c
#    Command line  =  
#        D:\uah\cpe323\lab7\assignment\lab7_assignment.c -lCN
#        D:\uah\cpe323\lab7\assignment\Debug\List\ -o
#        D:\uah\cpe323\lab7\assignment\Debug\Obj\ --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FG4618__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=16 --segment __data16=DATA16
#        --segment __data20=DATA20 --code_model=large
#    List file     =  
#        D:\uah\cpe323\lab7\assignment\Debug\List\lab7_assignment.lst
#    Object file   =  
#        D:\uah\cpe323\lab7\assignment\Debug\Obj\lab7_assignment.r43
#
###############################################################################

D:\uah\cpe323\lab7\assignment\lab7_assignment.c
      1          /***********************************************************************
      2           * Title: Lab 7 Assignment
      3           * Date Due: Oct sometime
      4           * 
      5           * Description:
      6           * Here we will use Timer_B to modulate the output of Port 3.5 (TB4)
      7           * in order to drive an annoying-as-fuck speaker on the Exp Board!
      8           * The main idea is that you /must/ run both cap/comp 0 and 4. Cap/comp
      9           * 0 is used to drive the clock and TBCCR0 sets the max value for most
     10           * of the MCx settings, such as "UP" mode.
     11           * In order to make the calculations easier, I'm going to use 'toggle'
     12           * mode in this program, which means that TBCCR4 *doesn't matter* and
     13           * we can module the speaker directly with TBCCR0 :D
     14           * Also, we use watchdog for something, I think...
     15           *
     16           * By: Christopher 'ctag' Bero <csb0019@uah.edu>
     17           * Project: https://github.com/ctag/uah
     18           *
     19           * This software is licensed under the GPLv3,
     20           * consult the LICENSE file for more information.
     21           **********************************************************************/
     22          
     23          #include <msp430.h> // The *correct* include statement

   \                                 In  segment DATA16_AN, at 0x0
   \   unsigned char volatile IE1
   \                     IE1:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x23
   \   unsigned char volatile P1IFG
   \                     P1IFG:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x24
   \   unsigned char volatile P1IES
   \                     P1IES:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x25
   \   unsigned char volatile P1IE
   \                     P1IE:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x1a
   \   unsigned char volatile P3DIR
   \                     P3DIR:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x1b
   \   unsigned char volatile P3SEL
   \                     P3SEL:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x180
   \   unsigned short volatile TBCTL
   \                     TBCTL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x18a
   \   unsigned short volatile TBCCTL4
   \                     TBCCTL4:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x192
   \   unsigned short volatile TBCCR0
   \                     TBCCR0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x19a
   \   unsigned short volatile TBCCR4
   \                     TBCCR4:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x120
   \   unsigned short volatile WDTCTL
   \                     WDTCTL:
   \   000000                DS8 2
     24          #include <math.h> // for pow(), puh power!
     25          //#include <stdio.h> // for enum?
     26          
     27          #define SW1 (0x01&P1IN)	// B1 - P1.0 switch SW1 
     28          #define SW2 (0x02&P1IN)	// B2 - P1.1 switch SW2
     29          
     30          #define LED1 BIT2; // LED1 - P2.2 - 0x04
     31          #define LED2 BIT1; // LED2 - P2.1 - 0x02
     32          
     33          // Usage: WDTCTL = WDT_CONFIG;
     34          #define WDT_CONFIG_250 (WDTPW|WDTCNTCL|WDTSSEL|WDTIS0) // Set bits to give us 0.250s watchdog
     35          #define WDT_CONFIG_1000 (WDTPW|WDTCNTCL|WDTSSEL) // Set bits to give us 1s watchdog
     36          #define WDT_INTERVAL_250 (WDTPW|WDTCNTCL|WDTTMSEL|WDTSSEL|WDTIS0) // Set bits to have 0.250s timer
     37          #define WDT_INTERVAL_1000 (WDTPW|WDTCNTCL|WDTTMSEL|WDTSSEL) // Set bits to have 1s timer
     38          #define WDT_HALT (WDTPW|WDTHOLD) // Set bits to halt the timer
     39          
     40          // Use instead of int flags
     41          typedef enum {
     42          	false = 0,
     43          	true = 1
     44          } bool;
     45          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     46          bool new_note_flag = false;
   \                     new_note_flag:
   \   000000                DS8 1
     47          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     48          double freq[] = {16.35, 17.32, 18.35, 19.45, 20.60, 21.83, 23.12, 24.50, 25.96, 27.50, 29.14, 30.87, 1.00};
   \                     freq:
   \   000000                DS8 52
   \   000034                REQUIRE `?<Initializer for freq>`

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     49          char notes[] = {'C', 'd', 'D', 'e', 'E', 'F', 'g', 'G', 'a', 'A', 'b', 'B', ' '};
   \                     notes:
   \   000000                DS8 13
   \   00000D                REQUIRE `?<Initializer for notes>`
     50          
     51          // P = Pulse
     52          // N = No Pulse
     53          

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     54          char songs[3][66] = 
   \                     songs:
   \   000000                DS8 198
   \   0000C6                REQUIRE `?<Initializer for songs>`
     55          {
     56          /*Twinkle Twinkle, Little Star*/
     57          	'P', /*Pulse*/
     58          	'C','C','G','G','A','A','G','G','G','G',' ',' ','F','F','E','E',
     59          	'D','D','C','C','C','C',' ',' ',
     60          	'C','C','G','G','A','A','G','G','G','G',' ',' ','F','F','E','E',
     61          	'D','D','C','C','C','C',' ',' ',
     62          	' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
     63          	'Z', /*FIN*/
     64          	
     65          /*Jolly Old St. Nicholas*/
     66          	'P', /*No Pulse*/
     67          	'B','B','B','B','A','A','A',' ','G','G','G','G','B',' ',' ',' ',
     68          	'E','E','E','E','D','D','G',' ','A','G','A','B','A',' ',' ',' ',
     69          	'B','B','B','B','A','A','A',' ','G','G','G','G','B',' ',' ',' ',
     70          	'E','E','E','E','D','D','G',' ','A','G','A','B','G',' ',' ',' ',
     71          	'Z', /*FIN*/
     72          	
     73          /*We Three Kings*/
     74          	'N', /*No Pulse*/
     75          	'B',' ','A','G',' ','E','g','G','g','E',' ',' ',
     76          	'B',' ','A','G',' ','E','g','G','g','E',' ',' ',
     77          	'G',' ','G','A',' ','A','B',' ','B','D','C','B',
     78          	'A','B','A','G',' ','g','E',' ',' ',' ',' ',' ',
     79          	' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
     80          	' ',' ',' ',' ',
     81          	'Z' /*FIN*/
     82          };
     83          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     84          short unsigned int songs_octive[3][66] = 
   \                     songs_octive:
   \   000000                DS8 396
   \   00018C                REQUIRE `?<Initializer for songs_octive>`
     85          {
     86          /*Twinkle Twinkle, Little Star*/
     87          	0,
     88          	5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
     89          	5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
     90          	5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
     91          	5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
     92          	-1, /*FIN*/
     93          
     94          /*Jolly Old St. Nicholas*/
     95          	0,
     96          	5,5,5,5,5,5,5,0,5,5,5,5,5,0,0,0,
     97          	4,4,4,4,4,4,5,0,5,5,5,5,5,0,0,0,
     98          	5,5,5,5,5,5,5,0,5,5,5,5,5,0,0,0,
     99          	4,4,4,4,4,4,5,0,5,5,5,5,5,0,0,0,
    100          	-1, /*FIN*/
    101          
    102          /*We Three Kings*/
    103          	0,
    104          	5,0,5,5,0,4,5,5,5,4,0,0,
    105          	5,0,5,5,0,4,5,5,5,4,0,0,
    106          	5,0,5,5,0,5,5,0,5,6,6,5,
    107          	5,5,5,5,0,5,4,0,0,0,0,0,
    108          	0,0,0,0,0,0,0,0,0,0,0,0,
    109          	0,0,0,0,
    110          	-1 /*FIN*/
    111          };
    112          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
    113          int index = 1;
   \                     index:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for index>`
    114          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
    115          int songs_num = 2;
   \                     songs_num:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for songs_num>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    116          int current_song = 0;
   \                     current_song:
   \   000000                DS8 2
    117          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    118          int rest = 0;
   \                     rest:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    119          int pulse = 0;
   \                     pulse:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
    120          char note = ' ';
   \                     note:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for note>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    121          short unsigned int octive = 0;
   \                     octive:
   \   000000                DS8 2
    122          

   \                                 In  segment CODE, align 2
    123          void main(void)
   \                     main:
    124          {
   \   000000   0A12         PUSH.W  R10
    125          	WDTCTL = WDT_HALT;
   \   000002   B240805A2001 MOV.W   #0x5a80, &0x120
    126          	
    127          	P1IE |= 0x0003;		// P1.0 interrupt enabled
   \   000008   F2D003002500 BIS.B   #0x3, &0x25
    128          	P1IES |= 0x0003;	// P1.0 hi -> low edge
   \   00000E   F2D003002400 BIS.B   #0x3, &0x24
    129          	P1IFG &= ~0x0003;	// Clear P1.0 IFG
   \   000014   F2F0FC002300 AND.B   #0xfc, &0x23
    130          	
    131          	IE1 |= BIT0; // BIT0 is WDTIE
   \   00001A   D2D30000     BIS.B   #0x1, &0x0
    132          	__enable_interrupt(); // Enable global interrupts
   \   00001E   32D2         EINT
    133          	
    134          	P3DIR |= BIT5; // Set P3.5 to OUT
   \   000020   F2D020001A00 BIS.B   #0x20, &0x1a
    135          	P3SEL |= BIT5; // Setup the special TB4 function of P3.5
   \   000026   F2D020001B00 BIS.B   #0x20, &0x1b
    136          	
    137          	/* Setup Timer_B's TBCTL
    138          	 * BITs Mapping for TxCTLx:
    139          	 *	[15]	[14]	[13]	[12]	[11]	[10]	[9]		[8]
    140          	 *	NA		NA		NA		NA		NA		NA		TASSEL	TASSEL
    141          	 *	0		0		0		0		0		0		0		1
    142          	 *
    143          	 *	[7]		[6]		[5]		[4]		[3]		[2]		[1]		[0]
    144          	 *	ID		ID		MC		MC		NA		TACLR	TAIE	TAIFG
    145          	 *	0		1		0		1		0		0		0		0
    146          	 *
    147          	 * Condensed: [0000][0001] [0101][0000]
    148          	 *
    149          	 * Specifics:
    150          	 * TASSELx = 01, ACLK
    151          	 * IDx = 01, divide ACLK by 2, ACLK/2 = 16,384
    152          	 * MCx = 01, UP mode
    153          	 */
    154          	TBCTL = 0x0150;
   \   00002C   B24050018001 MOV.W   #0x150, &0x180
    155          	
    156          	/* Choosing a value for TBCCR0:
    157          	 * This is a little tricky, because you can tackle this problem
    158          	 * from a multitude of angles, and the one I chose is likely non-standard,
    159          	 * but makes much more sense to me.
    160          	 * So, TBCCR0 represents the period out of 16,384 which we wish
    161          	 * for the speaker to be pulsed each second. A value of 16,384 means
    162          	 * the speaker will click once per second. A value of 16 means the
    163          	 * speaker will click about 1000 times per second, which is an audible tone!
    164          	 *
    165          	 * The formula:
    166          	 * TBCCR0 = [ACLK = 16384] / [desired freq in Hz]
    167          	 *
    168          	 * So, for 900Hz, TBCCR0 = [16384] / [900] = 18.2 = 18.
    169          	 */
    170          	 //TBCCR0 = 18;
    171          	
    172          	/* Setup Timer_B's TBCCTL4
    173          	 * BITs Mapping for TxCTLx:
    174          	 *	[15]	[14]	[13]	[12]	[11]	[10]	[9]		[8]
    175          	 *	CM		CM		CCIS	CCIS	SCS		CCLD	CCLD	CAP
    176          	 *	0		0		0		0		0		0		0		0
    177          	 *
    178          	 *	[7]		[6]		[5]		[4]		[3]		[2]		[1]		[0]
    179          	 *	OUTMOD	OUTMOD	OUTMOD	CCIE	CCI		OUT		COV		CCIFG
    180          	 *	1		0		0		0		0		0		0		0
    181          	 *
    182          	 * Condensed: [0000][0000] [1000][0000]
    183          	 *
    184          	 * Specifics:
    185          	 * OUTx = 100, Toggle mode (on TB4 of course) 
    186          	 */
    187          	TBCCTL4 = 0x0080;
   \   000032   B24080008A01 MOV.W   #0x80, &0x18a
    188          	
    189          	TBCCR4 = 1; // doesn't matter, can be any valid value
   \   000038   92439A01     MOV.W   #0x1, &0x19a
    190          	
    191          	while (1)
    192          	{
    193          		if (new_note_flag) // There's a new note waiting
   \                     ??main_0:
   \   00003C   C293....     CMP.B   #0x0, &new_note_flag
   \   000040   FD27         JEQ     ??main_0
    194          		{
    195          			for (int i = 0; i < 13; i++)
   \   000042   0A43         MOV.W   #0x0, R10
   \                     ??main_1:
   \   000044   3A900D00     CMP.W   #0xd, R10
   \   000048   3234         JGE     ??main_2
    196          			{
    197          				if (notes[i] == note)
   \   00004A   DA92........ CMP.B   &note, notes(R10)
   \   000050   2C20         JNE     ??main_3
    198          				{
    199          					if (notes[i] == ' ')
   \   000052   FA902000.... CMP.B   #0x20, notes(R10)
   \   000058   0320         JNE     ??main_4
    200          					{
    201          						TBCCR0 = 0; // halt the buzzer for a rest
   \   00005A   82439201     MOV.W   #0x0, &0x192
   \   00005E   253C         JMP     ??main_3
    202          					} else {
    203          						TBCCR0 = (16384 / (int)(freq[i] * pow(2,octive) ) ); // Set the correct period to achieve a note
   \                     ??main_4:
   \   000060   1C42....     MOV.W   &octive, R12
   \   000064   0D43         MOV.W   #0x0, R13
   \   000066   ........     CALLA   #_Cast32uto32f
   \   00006A   0E4C         MOV.W   R12, R14
   \   00006C   0F4D         MOV.W   R13, R15
   \   00006E   0C43         MOV.W   #0x0, R12
   \   000070   3D400040     MOV.W   #0x4000, R13
   \   000074   ........     CALLA   #pow
   \   000078   0E4C         MOV.W   R12, R14
   \   00007A   0F4D         MOV.W   R13, R15
   \   00007C   5A06         RLAM.W  #0x2, R10
   \   00007E   1C4A....     MOV.W   freq(R10), R12
   \   000082   1D4A....     MOV.W   freq + 2(R10), R13
   \   000086   ........     CALLA   #_Mul32f
   \   00008A   0E4C         MOV.W   R12, R14
   \   00008C   0F4D         MOV.W   R13, R15
   \   00008E   3C400040     MOV.W   #0x4000, R12
   \   000092   0A4C         MOV.W   R12, R10
   \   000094   0C4E         MOV.W   R14, R12
   \   000096   0D4F         MOV.W   R15, R13
   \   000098   ........     CALLA   #_Cast32fto32s
   \   00009C   0E4C         MOV.W   R12, R14
   \   00009E   0C4A         MOV.W   R10, R12
   \   0000A0   ........     CALLA   #?DivMod16s
   \   0000A4   824C9201     MOV.W   R12, &0x192
    204          						break; // break from for loop
   \   0000A8   023C         JMP     ??main_2
    205          					}
    206          				}
    207          			}
   \                     ??main_3:
   \   0000AA   1A53         ADD.W   #0x1, R10
   \   0000AC   CB3F         JMP     ??main_1
    208          			new_note_flag = false;
   \                     ??main_2:
   \   0000AE   C243....     MOV.B   #0x0, &new_note_flag
   \   0000B2   C43F         JMP     ??main_0
   \   0000B4                REQUIRE WDTCTL
   \   0000B4                REQUIRE P1IE
   \   0000B4                REQUIRE P1IES
   \   0000B4                REQUIRE P1IFG
   \   0000B4                REQUIRE IE1
   \   0000B4                REQUIRE P3DIR
   \   0000B4                REQUIRE P3SEL
   \   0000B4                REQUIRE TBCTL
   \   0000B4                REQUIRE TBCCTL4
   \   0000B4                REQUIRE TBCCR4
   \   0000B4                REQUIRE TBCCR0
    209          		}
    210          	}
    211          }
    212          
    213          /*
    214           * Watchdog interrupt service
    215           */
    216          #pragma vector = WDT_VECTOR

   \                                 In  segment ISR_CODE, align 2
    217          __interrupt void blink_watchdog(void)
   \                     blink_watchdog:
    218          {
   \   000000   2F15         PUSHM.W #0x3, R15
    219          	new_note_flag = true;
   \   000002   D243....     MOV.B   #0x1, &new_note_flag
    220          	if (rest == 0)
   \   000006   8293....     CMP.W   #0x0, &rest
   \   00000A   3520         JNE     ??blink_watchdog_0
    221          	{
    222          		index++;
   \   00000C   9253....     ADD.W   #0x1, &index
    223          		note = songs[current_song][index];
   \   000010   1F42....     MOV.W   &current_song, R15
   \   000014   0F5F         RLA.W   R15
   \   000016   0E4F         MOV.W   R15, R14
   \   000018                RPT     #0x5
   \   000018   44180F5F     RLAX.W  R15
   \   00001C   0F5E         ADD.W   R14, R15
   \   00001E   1F52....     ADD.W   &index, R15
   \   000022   D24F........ MOV.B   songs(R15), &note
    224          		octive = songs_octive[current_song][index];
   \   000028   1F42....     MOV.W   &current_song, R15
   \   00002C   5F06         RLAM.W  #0x2, R15
   \   00002E   0E4F         MOV.W   R15, R14
   \   000030                RPT     #0x5
   \   000030   44180F5F     RLAX.W  R15
   \   000034   0F5E         ADD.W   R14, R15
   \   000036   1E42....     MOV.W   &index, R14
   \   00003A   0E5E         RLA.W   R14
   \   00003C   0F5E         ADD.W   R14, R15
   \   00003E   924F........ MOV.W   songs_octive(R15), &octive
    225          		
    226          		if (songs[current_song][index] == 'Z')
   \   000044   1F42....     MOV.W   &current_song, R15
   \   000048   0F5F         RLA.W   R15
   \   00004A   0E4F         MOV.W   R15, R14
   \   00004C                RPT     #0x5
   \   00004C   44180F5F     RLAX.W  R15
   \   000050   0F5E         ADD.W   R14, R15
   \   000052   1F52....     ADD.W   &index, R15
   \   000056   FF905A00.... CMP.B   #0x5a, songs(R15)
   \   00005C   0620         JNE     ??blink_watchdog_1
    227          		{
    228          			index = 1;
   \   00005E   9243....     MOV.W   #0x1, &index
    229          			WDTCTL = WDT_HALT;
   \   000062   B240805A2001 MOV.W   #0x5a80, &0x120
   \   000068   0D3C         JMP     ??blink_watchdog_2
    230          		} else if (pulse == 1) {
   \                     ??blink_watchdog_1:
   \   00006A   9293....     CMP.W   #0x1, &pulse
   \   00006E   0A20         JNE     ??blink_watchdog_2
    231          			rest++;
   \   000070   9253....     ADD.W   #0x1, &rest
   \   000074   073C         JMP     ??blink_watchdog_2
    232          		}
    233          	} else {
    234          		note = ' ';
   \                     ??blink_watchdog_0:
   \   000076   F2402000.... MOV.B   #0x20, &note
    235          		octive = 0;
   \   00007C   8243....     MOV.W   #0x0, &octive
    236          		rest = 0;
   \   000080   8243....     MOV.W   #0x0, &rest
    237          	}
    238          }
   \                     ??blink_watchdog_2:
   \   000084   2D17         POPM.W  #0x3, R15
   \   000086   0013         RETI
   \   000088                REQUIRE WDTCTL
    239          
    240          /*
    241           * Port 1 interrupt service
    242           */
    243          #pragma vector = PORT1_VECTOR

   \                                 In  segment ISR_CODE, align 2
    244          __interrupt void Port1_ISR (void)
   \                     Port1_ISR:
    245          {
   \   000000   1F15         PUSHM.W #0x2, R15
    246          	current_song++;
   \   000002   9253....     ADD.W   #0x1, &current_song
    247          	
    248          	if (current_song == 3)
   \   000006   B2900300.... CMP.W   #0x3, &current_song
   \   00000C   0220         JNE     ??Port1_ISR_0
    249          	{
    250          		current_song = 0;
   \   00000E   8243....     MOV.W   #0x0, &current_song
    251          	}
    252          	
    253          	if (songs[current_song][0] == 'P')
   \                     ??Port1_ISR_0:
   \   000012   1F42....     MOV.W   &current_song, R15
   \   000016   0F5F         RLA.W   R15
   \   000018   0E4F         MOV.W   R15, R14
   \   00001A                RPT     #0x5
   \   00001A   44180F5F     RLAX.W  R15
   \   00001E   0F5E         ADD.W   R14, R15
   \   000020   FF905000.... CMP.B   #0x50, songs(R15)
   \   000026   0320         JNE     ??Port1_ISR_1
    254          	{
    255          		pulse = 1;
   \   000028   9243....     MOV.W   #0x1, &pulse
   \   00002C   023C         JMP     ??Port1_ISR_2
    256          	} else {
    257          		pulse = 0;
   \                     ??Port1_ISR_1:
   \   00002E   8243....     MOV.W   #0x0, &pulse
    258          	}
    259          	
    260          	rest = 0;
   \                     ??Port1_ISR_2:
   \   000032   8243....     MOV.W   #0x0, &rest
    261          	index = 1;
   \   000036   9243....     MOV.W   #0x1, &index
    262                  
    263          	WDTCTL = WDT_INTERVAL_250;
   \   00003A   B2401D5A2001 MOV.W   #0x5a1d, &0x120
    264                  
    265          	P1IFG &= ~0x0003;	// Clear P1.0 IFG
   \   000040   F2F0FC002300 AND.B   #0xfc, &0x23
    266          }
   \   000046   1E17         POPM.W  #0x2, R15
   \   000048   0013         RETI
   \   00004A                REQUIRE WDTCTL
   \   00004A                REQUIRE P1IFG

   \                                 In  segment INTVEC, offset 0x28, root
   \                     `??Port1_ISR??INTVEC 40`:
   \   000028   ....         DC16    Port1_ISR

   \                                 In  segment INTVEC, offset 0x34, root
   \                     `??blink_watchdog??INTVEC 52`:
   \   000034   ....         DC16    blink_watchdog

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for freq>`:
   \   000000   CDCC82415C8F DC32 4182CCCDH, 418A8F5CH, 4192CCCDH, 419B999AH, 41A4CCCDH, 41AEA3D7H
   \            8A41CDCC9241
   \            9A999B41CDCC
   \            A441D7A3AE41
   \   000018   C3F5B8410000 DC32 41B8F5C3H, 41C40000H, 41CFAE14H, 41DC0000H, 41E91EB8H, 41F6F5C3H
   \            C44114AECF41
   \            0000DC41B81E
   \            E941C3F5F641
   \   000030   0000803F     DC32 3F800000H

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for notes>`:
   \   000000   436444654546 DC8 67, 100, 68, 101, 69, 70, 103, 71, 97, 65, 98, 66, 32
   \            674761416242
   \            20          

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for songs>`:
   \   000000   504343474741 DC8 80, 67, 67, 71, 71, 65, 65, 71, 71, 71, 71, 32, 32, 70, 70, 69, 69
   \            414747474720
   \            2046464545  
   \   000011   444443434343 DC8 68, 68, 67, 67, 67, 67, 32, 32, 67, 67, 71, 71, 65, 65, 71, 71, 71
   \            202043434747
   \            4141474747  
   \   000022   472020464645 DC8 71, 32, 32, 70, 70, 69, 69, 68, 68, 67, 67, 67, 67, 32, 32, 32, 32
   \            454444434343
   \            4320202020  
   \   000033   202020202020 DC8 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 90, 80, 66
   \            202020202020
   \            20205A5042  
   \   000044   424242414141 DC8 66, 66, 66, 65, 65, 65, 32, 71, 71, 71, 71, 66, 32, 32, 32, 69, 69
   \            204747474742
   \            2020204545  
   \   000055   454544444720 DC8 69, 69, 68, 68, 71, 32, 65, 71, 65, 66, 65, 32, 32, 32, 66, 66, 66
   \            414741424120
   \            2020424242  
   \   000066   424141412047 DC8 66, 65, 65, 65, 32, 71, 71, 71, 71, 66, 32, 32, 32, 69, 69, 69, 69
   \            474747422020
   \            2045454545  
   \   000077   444447204147 DC8 68, 68, 71, 32, 65, 71, 65, 66, 71, 32, 32, 32, 90, 78, 66, 32, 65
   \            414247202020
   \            5A4E422041  
   \   000088   472045674767 DC8 71, 32, 69, 103, 71, 103, 69, 32, 32, 66, 32, 65, 71, 32, 69, 103
   \            452020422041
   \            47204567    
   \   000098   476745202047 DC8 71, 103, 69, 32, 32, 71, 32, 71, 65, 32, 65, 66, 32, 66, 68, 67, 66
   \            204741204142
   \            2042444342  
   \   0000A9   414241472067 DC8 65, 66, 65, 71, 32, 103, 69, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32
   \            452020202020
   \            2020202020  
   \   0000BA   202020202020 DC8 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 90
   \            20202020205A

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for songs_octive>`:
   \   000000   000005000500 DC16 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
   \            050005000500
   \            050005000500
   \            050005000500
   \            050005000500
   \            050005000500
   \            050005000500
   \            0500        
   \   00002C   050005000500 DC16 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
   \            050005000500
   \            050005000500
   \            050005000500
   \            050005000500
   \            050005000500
   \            050005000500
   \            0500        
   \   000058   050005000500 DC16 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
   \            050005000500
   \            050005000500
   \            050005000500
   \            050005000500
   \            050005000500
   \            050005000500
   \   000082   FFFF00000500 DC16 65535, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0, 0, 4, 4, 4
   \            050005000500
   \            050005000500
   \            000005000500
   \            050005000500
   \            000000000000
   \            040004000400
   \   0000AC   040004000400 DC16 4, 4, 4, 5, 0, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5
   \            050000000500
   \            050005000500
   \            050000000000
   \            000005000500
   \            050005000500
   \            050005000000
   \            0500        
   \   0000D8   050005000500 DC16 5, 5, 5, 5, 0, 0, 0, 4, 4, 4, 4, 4, 4, 5, 0, 5, 5, 5, 5, 5, 0, 0
   \            050000000000
   \            000004000400
   \            040004000400
   \            040005000000
   \            050005000500
   \            050005000000
   \            0000        
   \   000104   0000FFFF0000 DC16 0, 65535, 0, 5, 0, 5, 5, 0, 4, 5, 5, 5, 4, 0, 0, 5, 0, 5, 5, 0, 4
   \            050000000500
   \            050000000400
   \            050005000500
   \            040000000000
   \            050000000500
   \            050000000400
   \   00012E   050005000500 DC16 5, 5, 5, 4, 0, 0, 5, 0, 5, 5, 0, 5, 5, 0, 5, 6, 6, 5, 5, 5, 5, 5
   \            040000000000
   \            050000000500
   \            050000000500
   \            050000000500
   \            060006000500
   \            050005000500
   \            0500        
   \   00015A   000005000400 DC16 0, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \            000000000000
   \            000000000000
   \            000000000000
   \            000000000000
   \            0000        
   \   000186   00000000FFFF DC16 0, 0, 65535

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for index>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for songs_num>`:
   \   000000   0200         DC16 2

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for note>`:
   \   000000   20           DC8 32
    267          
    268          
    269          
    270          
    271          
    272          
    273          
    274          
    275          
    276          
    277          
    278          
    279          
    280          
    281          
    282          
    283          
    284          
    285          
    286          
    287          
    288          
    289          
    290          
    291          
    292          
    293          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      8   Port1_ISR
     10   blink_watchdog
      6   main
        6   -> _Cast32fto32s
        6   -> _Cast32uto32f
        6   -> _Mul32f
        6   -> pow


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      52  ?<Initializer for freq>
       2  ?<Initializer for index>
       1  ?<Initializer for note>
      13  ?<Initializer for notes>
     198  ?<Initializer for songs>
       2  ?<Initializer for songs_num>
     396  ?<Initializer for songs_octive>
       2  ??Port1_ISR??INTVEC 40
       2  ??blink_watchdog??INTVEC 52
       1  IE1
       1  P1IE
       1  P1IES
       1  P1IFG
       1  P3DIR
       1  P3SEL
      74  Port1_ISR
       2  TBCCR0
       2  TBCCR4
       2  TBCCTL4
       2  TBCTL
       2  WDTCTL
     136  blink_watchdog
       2  current_song
      52  freq
       2  index
     180  main
       1  new_note_flag
       1  note
      13  notes
       2  octive
       2  pulse
       2  rest
     198  songs
       2  songs_num
     396  songs_octive

 
 180 bytes in segment CODE
  16 bytes in segment DATA16_AN
 664 bytes in segment DATA16_I
 664 bytes in segment DATA16_ID
   9 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 210 bytes in segment ISR_CODE
 
 390 bytes of CODE  memory
 664 bytes of CONST memory (+  4 bytes shared)
 673 bytes of DATA  memory (+ 16 bytes shared)

Errors: none
Warnings: none
