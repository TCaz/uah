/*--------------------------------------------------------------------------------
* Program    : Find a sum of two integer arrays using a subroutine (Lab4_D2_SR.s43)
* Input      : The input arrays are signed 16-bit integers in arr1 and arr2
* Output     : Display sum of arr1 on P1OUT&P2OUT and sum of arr2 on P3OUT&P4OUT
* Modified by: A. Milenkovic, milenkovic@computer.org
* Date       : September 14, 2008
* Description: MSP430 IAR EW; Demonstation of the MSP430 assembler
*--------------------------------------------------------------------------------*/
#include "msp430.h"                     ; #define controlled include file

        ORG     0FF00h

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label visible
                                        ; outside this module
                                        
        EXTERN  suma_rp
        ORG     0FFFEh
        DC16    main                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

main:   MOV     #SFE(CSTACK), SP        ; set up stack
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        BIS.B   #0xFF,&P1DIR            ; configure P1.x as output
        BIS.B   #0xFF,&P2DIR            ; configure P2.x as output
        BIS.B   #0xFF,&P3DIR            ; configure P3.x as output
        BIS.B   #0xFF,&P4DIR            ; configure P4.x as output

        MOV     #arr1, R12	; put address into R12	
        MOV     #8, R13		; put array length into R13	
        MOV     #0, R14		; display #0 (P1&P2)
        CALL    #suma_rp

        MOV     #arr2, R12	; put address into R12	
        MOV     #7, R13		; put array length into R13	
        MOV     #1, R14		; display #0 (P3&P4)
        CALL    #suma_rp
        JMP     $

arr1    DC16     1, 2, 3, 4, 1, 2, 3, 4     ; the first array
arr2    DC16     1, 1, 1, 1, -1, -1, -1     ; the second array

        END
