###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         06/Oct/2014  17:00:25
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  D:\uah\cpe323\test_lcd\lcd_test_c.c
#    Command line  =  
#        D:\uah\cpe323\test_lcd\lcd_test_c.c -lCN
#        D:\uah\cpe323\test_lcd\Debug\List\ -o
#        D:\uah\cpe323\test_lcd\Debug\Obj\ --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FG4618__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=16 --segment __data16=DATA16 --segment __data20=DATA20
#        --code_model=large
#    List file     =  D:\uah\cpe323\test_lcd\Debug\List\lcd_test_c.lst
#    Object file   =  D:\uah\cpe323\test_lcd\Debug\Obj\lcd_test_c.r43
#
###############################################################################

D:\uah\cpe323\test_lcd\lcd_test_c.c
      1          /***********************************************************************
      2           * An lcd test. Nothing more.
      3           **********************************************************************/
      4          
      5          #include <msp430.h> // The correct include statement

   \                                 In  segment DATA16_AN, at 0x90
   \   unsigned char volatile LCDACTL
   \                     LCDACTL:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0xac
   \   unsigned char volatile LCDAPCTL0
   \                     LCDAPCTL0:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0xae
   \   unsigned char volatile LCDAVCTL0
   \                     LCDAVCTL0:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x93
   \   unsigned char volatile LCDM3
   \                     LCDM3:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x29
   \   unsigned char volatile P2OUT
   \                     P2OUT:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x2a
   \   unsigned char volatile P2DIR
   \                     P2DIR:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x33
   \   unsigned char volatile P5SEL
   \                     P5SEL:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x160
   \   unsigned short volatile TACTL
   \                     TACTL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x162
   \   unsigned short volatile TACCTL0
   \                     TACCTL0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x172
   \   unsigned short volatile TACCR0
   \                     TACCR0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x120
   \   unsigned short volatile WDTCTL
   \                     WDTCTL:
   \   000000                DS8 2
      6          #include <intrinsics.h>
      7          #include <stdint.h>
      8          
      9          #define SW1 (0x01&P1IN)	// B1 - P1.0 switch SW1 
     10          #define SW2 (0x02&P1IN)	// B2 - P1.1 switch SW2
     11          
     12          #define LCDMEMS 11

   \                                 In  segment DATA16_C, align 2, align-sorted
     13          uint8_t * const LCDMem = (uint8_t *) &LCDM3;
   \                     LCDMem:
   \   000000   ....         DC16 LCDM3
     14          
     15          void InitLCD (void);
     16          

   \                                 In  segment CODE, align 2
     17          void main(void)
   \                     main:
     18          {
   \   000000   0A12         PUSH.W  R10
     19          	WDTCTL = WDTPW|WDTHOLD;
   \   000002   B240805A2001 MOV.W   #0x5a80, &0x120
     20          	
     21          	int i, j;
     22          	enum {up, down} direction;
     23          	
     24          	P2OUT = BIT2;
   \   000008   E2422900     MOV.B   #0x4, &0x29
     25          	P2DIR = BIT1|BIT2;
   \   00000C   F24006002A00 MOV.B   #0x6, &0x2a
     26          	
     27          	InitLCD();
   \   000012   ........     CALLA   #InitLCD
     28          	
     29          	TACCR0 = 0x1000;
   \   000016   B24000107201 MOV.W   #0x1000, &0x172
     30          	TACCTL0 = CCIE;
   \   00001C   B24010006201 MOV.W   #0x10, &0x162
     31          	TACTL = MC_1 | TASSEL_1 | TACLR;
   \   000022   B24014016001 MOV.W   #0x114, &0x160
     32          	
     33          	direction = up;
   \   000028   4A43         MOV.B   #0x0, R10
     34          	
     35          	while (1)
     36          	{
     37          		for (i = 0; i < LCDMEMS; ++i) 
   \                     ??main_2:
   \   00002A   0D43         MOV.W   #0x0, R13
   \                     ??main_1:
   \   00002C   3D900B00     CMP.W   #0xb, R13
   \   000030   2134         JGE     ??main_3
     38          		{
     39                            for (j = 0; j < 8; ++j)
   \   000032   0C43         MOV.W   #0x0, R12
   \                     ??main_0:
   \   000034   3C92         CMP.W   #0x8, R12
   \   000036   1834         JGE     ??main_4
     40                            {
     41          			__low_power_mode_3();
   \   000038   32D0D800     BIS.W   #0xd8, SR
     42          			if (direction == up) {
   \   00003C   4A93         CMP.B   #0x0, R10
   \   00003E   0D20         JNE     ??main_5
     43          				LCDMem[i] = (LCDMem[i] << 1) | BIT0;
   \   000040   1F42....     MOV.W   &LCDMem, R15
   \   000044   0F5D         ADD.W   R13, R15
   \   000046   6E4F         MOV.B   @R15, R14
   \   000048   4E4E         MOV.B   R14, R14
   \   00004A   0E5E         RLA.W   R14
   \   00004C   5ED3         BIS.B   #0x1, R14
   \   00004E   1F42....     MOV.W   &LCDMem, R15
   \   000052   0F5D         ADD.W   R13, R15
   \   000054   CF4E0000     MOV.B   R14, 0(R15)
   \   000058   053C         JMP     ??main_6
     44          				
     45          			}
     46          			else {
     47          				LCDMem[i] = (LCDMem[i] << 1);
   \                     ??main_5:
   \   00005A   1F42....     MOV.W   &LCDMem, R15
   \   00005E   0F5D         ADD.W   R13, R15
   \   000060   EF5F0000     ADD.B   @R15, 0(R15)
     48          			}
     49                            }
   \                     ??main_6:
   \   000064   1C53         ADD.W   #0x1, R12
   \   000066   E63F         JMP     ??main_0
     50                            __low_power_mode_3();
   \                     ??main_4:
   \   000068   32D0D800     BIS.W   #0xd8, SR
     51                            __low_power_mode_3();
   \   00006C   32D0D800     BIS.W   #0xd8, SR
     52          		}
   \   000070   1D53         ADD.W   #0x1, R13
   \   000072   DC3F         JMP     ??main_1
     53          		if (direction == up) {
   \                     ??main_3:
   \   000074   4A93         CMP.B   #0x0, R10
   \   000076   0220         JNE     ??main_7
     54          			direction = down;
   \   000078   5A43         MOV.B   #0x1, R10
   \   00007A   D73F         JMP     ??main_2
     55          		} else {
     56          			direction = up;
   \                     ??main_7:
   \   00007C   4A43         MOV.B   #0x0, R10
   \   00007E   D53F         JMP     ??main_2
   \   000080                REQUIRE WDTCTL
   \   000080                REQUIRE P2OUT
   \   000080                REQUIRE P2DIR
   \   000080                REQUIRE TACCR0
   \   000080                REQUIRE TACCTL0
   \   000080                REQUIRE TACTL
     57          		}
     58          	}
     59          }
     60          

   \                                 In  segment CODE, align 2
     61          void InitLCD (void)
   \                     InitLCD:
     62          {
     63          	int i;
     64          	for (i = 0; i < LCDMEMS; ++i)
   \   000000   0F43         MOV.W   #0x0, R15
   \                     ??InitLCD_0:
   \   000002   3F900B00     CMP.W   #0xb, R15
   \   000006   0734         JGE     ??InitLCD_1
     65          	{
     66          		LCDMem[i] = 0;
   \   000008   1E42....     MOV.W   &LCDMem, R14
   \   00000C   0E5F         ADD.W   R15, R14
   \   00000E   CE430000     MOV.B   #0x0, 0(R14)
     67          	}
   \   000012   1F53         ADD.W   #0x1, R15
   \   000014   F63F         JMP     ??InitLCD_0
     68          	P5SEL = BIT4 | BIT3 | BIT2;
   \                     ??InitLCD_1:
   \   000016   F2401C003300 MOV.B   #0x1c, &0x33
     69          	LCDAPCTL0 = LCDS4|LCDS8|LCDS12|LCDS16|LCDS20|LCDS24;
   \   00001C   F2407E00AC00 MOV.B   #0x7e, &0xac
     70          	LCDAVCTL0=0;
   \   000022   C243AE00     MOV.B   #0x0, &0xae
     71          	LCDACTL = LCDFREQ_128 | LCD4MUX | LCDSON | LCDON;
   \   000026   F2407D009000 MOV.B   #0x7d, &0x90
     72          }
   \   00002C   1001         RETA
   \   00002E                REQUIRE P5SEL
   \   00002E                REQUIRE LCDAPCTL0
   \   00002E                REQUIRE LCDAVCTL0
   \   00002E                REQUIRE LCDACTL
     73          
     74          #pragma vector = TIMERA0_VECTOR

   \                                 In  segment ISR_CODE, align 2
     75          __interrupt void TIMERA0_ISR (void)
   \                     TIMERA0_ISR:
     76          {
     77          	P2OUT ^= BIT1|BIT2;
   \   000000   F2E006002900 XOR.B   #0x6, &0x29
     78          	__low_power_mode_off_on_exit();
   \   000006   B1C0F0000000 BIC.W   #0xf0, 0(SP)
     79          }
   \   00000C   0013         RETI
   \   00000E                REQUIRE P2OUT

   \                                 In  segment INTVEC, offset 0x2c, root
   \                     `??TIMERA0_ISR??INTVEC 44`:
   \   00002C   ....         DC16    TIMERA0_ISR
     80          
     81          
     82          
     83          
     84          
     85          
     86          
     87          
     88          
     89          
     90          
     91          
     92          
     93          
     94          
     95          
     96          
     97          
     98          
     99          
    100          
    101          
    102          
    103          
    104          
    105          
    106          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   InitLCD
      4   TIMERA0_ISR
      6   main
        6   -> InitLCD


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ??TIMERA0_ISR??INTVEC 44
      46  InitLCD
       1  LCDACTL
       1  LCDAPCTL0
       1  LCDAVCTL0
       1  LCDM3
       2  LCDMem
       1  P2DIR
       1  P2OUT
       1  P5SEL
       2  TACCR0
       2  TACCTL0
       2  TACTL
      14  TIMERA0_ISR
       2  WDTCTL
     128  main

 
 174 bytes in segment CODE
  15 bytes in segment DATA16_AN
   2 bytes in segment DATA16_C
   2 bytes in segment INTVEC
  14 bytes in segment ISR_CODE
 
 188 bytes of CODE  memory
   2 bytes of CONST memory (+  2 bytes shared)
   0 bytes of DATA  memory (+ 15 bytes shared)

Errors: none
Warnings: none
